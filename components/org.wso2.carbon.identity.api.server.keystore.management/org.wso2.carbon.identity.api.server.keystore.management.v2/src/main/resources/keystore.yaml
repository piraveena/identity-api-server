openapi: 3.0.0
info:
  description: This is the REST API for Keystore related operations in WSO2 Identity Server.
  version: '2.0'
  title: WSO2 Identity Server - Keystore API
  contact:
    name: WSO2 Identity Server
    url: 'https://wso2.com/identity-and-access-management'
    email: architecture@wso2.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://localhost:9443/t/{tenant-domain}/api/server/v2'
    variables:
      tenant-domain:
        default: carbon.super
paths:
  /keystore/keys:
    get:
      tags:
        - Certificates
      summary: Retrieves the list of private key aliases
      operationId: getPrivateKeyAliases
      description: |
        This REST API can be used to get the certificate aliases from the keystore.<br>
        <b>Permission required:</b> <br>
          * /permission/admin/manage/identity/keystoremgt/view <br>
        <b>Scope required:</b> <br>
          * internal_keystore_view
      security:
        - BasicAuth: []
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/filterQueryParam'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrivateKeysResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Certificates
      summary: Uploads the certificate with the given alias
      operationId: uploadPrivateKey
      description: |
        This REST API can be used to upload the certificate to the tenant keystore. This API is not supported for super tenant. <br>
        <b>Permission required:</b> <br>
          * /permission/admin/manage/identity/keystoremgt/update <br>
        <b>Scope required:</b> <br>
          * internal_keystore_update
      servers:
        - url: 'https://localhost:9443/t/wso2.com/api/server/v2'
      security:
        - BasicAuth: []
        - OAuth2: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPrivateKeyRequest'
      responses:
        '201':
          description: Created.
          headers:
            Location:
              description: Certificate
              schema:
                type: string
                format: uri
                example: https://localhost:9443/t/wso2.com/api/server/v2/keystores/keys/newcert
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'


  /keystore/keys/{alias}:
    get:
      tags:
        - Certificates
      summary: Retrieves the certificate of the provided alias
      operationId: getPrivateKey
      description: |
        This REST API can be used to download the private key of specified alias from the keystore. <br>
        <b>Permission required:</b> <br>
          * /permission/admin/manage/identity/keystoremgt/view <br>
        <b>Scope required:</b> <br>
          * internal_keystore_view
      servers:
        - url: 'https://localhost:9443/t/carbon.super/api/server/v2'
      security:
        - BasicAuth: []
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/aliasPathParam'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateKeyDataObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Certificates
      summary: Deletes the privatekey
      operationId: deletePrivateKey
      description: |
        This REST API can be used to delete the private key with the given alias from the tenant keystore. This API is not supported for super tenant. <br>
        <b>Permission required:</b> <br>
          * /permission/admin/manage/identity/keystoremgt/update <br>
        <b>Scope required:</b> <br>
          * internal_keystore_update
      servers:
        - url: 'https://localhost:9443/t/wso2.com/api/server/v2'
      security:
        - BasicAuth: []
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/aliasPathParam'
      responses:
        '204':
          description: Successfully Deleted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  parameters:
    filterQueryParam:
      in: query
      name: filter
      required: false
      description: Condition to filter the retrieval of records. Supports 'sw', 'co', 'ew' and 'eq' operations.
        E.g. keystores/certs?filter=alias+eq+wso2carbon
      schema:
        type: string
    aliasPathParam:
      in: path
      name: alias
      required: true
      description: alias of the certificate
      schema:
        type: string
    encodeCertQueryParam:
      in: query
      name: encode-cert
      required: false
      schema:
        type: boolean
  responses:
    BadRequest:
      description: Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized.
    Forbidden:
      description: Resource Forbidden.
    NotFound:
      description: Resource Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    MethodNotAllowed:
      description: Method Not Allowed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://localhost:9443/oauth2/authorize'
          tokenUrl: 'https://localhost:9443/oauth2/token'
          scopes: {}
  schemas:
    PrivateKeyDataObject:
      type: object
      properties:
        alias:
          type: string
          example: newKey
          description: Return the alias of the private key
        subjectDN:
          type: string
          example: C=None, O=None L, OU=None, CN=cert5
        issurDN:
          type: string
          example: C=None, O=None L, OU=None, CN=cert5
        serialNumber:
          type: integer
          example: 1763023298
        version:
          type: integer
          example: 3
        NotAfter:
          type: string
          pattern: '^\d{3}-\d{2}-\d{4}$'
          example: 10/01/2031
        NotBefore:
          type: string
          pattern: '^\d{3}-\d{2}-\d{4}$'
          example: 10/01/2014
    PrivateKeysResponse:
      type: object
      properties:
        alias:
          type: string
          example: newKey
          description: Return the alias of the private key
        subjectDN:
          type: string
          example: C=None, O=None L, OU=None, CN=cert5
        issurDN:
          type: string
          example: C=None, O=None L, OU=None, CN=cert5
        NotAfter:
          type: string
          pattern: '^\d{3}-\d{2}-\d{4}$'
          example: 10/01/2031
        privatekey:
          type: string
          format: uri
          example: https://localhost:9443/t/carbon.super/api/server/v2/keystores/keys/wso2carbon
    AddPrivateKeyRequest:
      type: object
      required:
        - alias
        - certificate
      properties:
        alias:
          type: string
          example: newkey
        certificate:
          type: string
          example: 'MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDPE0Qg/kdSpSE94YVXQ2cfnZZ6V8DQvYvc0kjHiRljQFQpCwRoenhuZQ6v6d2wOT43DtlUFajDIqryju76YjKIIMFQCk5qLRUwU5IxBJIFR+WTqANTvnzC1eS0drfeQL1pclsRwWAfEBIQOcJfb72B74h5SH5t1RuhiP5g4xW0wkCb741rENXrxSTvnQ2vQF0sJlPJkWqOczTZnrvtRt84+PuieeevCUjZOY2Y9jSenOKCfsDaUvbCQ0EDK0zqJWyh16I0LY+KMwcl4EbJQ0QBp0daMfqj8ChbUCYZnN/yfQsix2NaehW5W5CpSWVdNObcJ6BSsnWj93tRMwgNmy6ZAgMBAAECggEAfsAJPLTIjXLcRRds2fw8/CImwJ5EPME5AiKJP/HQY2s12KWQvi7w1onvEohxFPQE/AiPyKM1WLQ4tR3+c651xdNe4JJeaylLRfhxjKWCh875XIdD+heoIE5ynm/onhc8mXXQ/q5CGuFoXRwtuOMZuZYYEDzqfmoqbpb/NejqGWiPyGKHXHxgX3k9vSCqxGSENsZUuBsYtkR/k2zc5lYkYc6kYY0Ko+Rgj8As1c3kFXFqODUrH6Pm2rizLpRl6Qe7tg9r7PtYI6zUm4AvZyR+Hx7cqoEaEwJbXO7kj2cJ7p0S/a58AoZq5HpF2cwlJ7dEeNgcJNB7++PKapiWuy1EAQKBgQDtnUrEuR/G76fxcuCM8fadkIWY9uxasMPaJX9KIlBDfMMba/G/xMPJwUfcTZDrFnoNn7XsEbk9leKfvylXwbqr9b35jCtp+MTyaNd5iNxBQh61ZEhoinK157W99UHVPbL5+Y0OoV7bN9SzmEljirlikrmKyXMUOqHbp0skCWj8gQKBgQDfGQyJ2tfj4/ZD6utbjzx7yCfR4IAh7HhNAK/lw+yQvw53ye69YVcZvUMzoIw8NGsZfbWbh1Qqopm1Q5ONSzMEVPU53kNzDdJFamFrAqQz5VAeklQDUngT5i8gyXBUMXLQL0MJmSNPucLJAIXK2f2x47CjcgbxRUrWNIjQkq+GGQKBgFmiJhxDgTs4GHA6V36Tn+YcKGllbA9h8t+NmZDLlN+AZtEnTRB8Fyc6Y/M0x2AHII+XGbctkGUs70o3gE78Y4COuNU0DQRytUiESBQujneHi7H9XFsjLtZzy9kWdXkNR0CI5K8KLJAhZXlCDx0frYMDuj4ic+jDnV8QooW7jwEBAoGAXs/6cCu9THB5HGweEg9RmRl7MsrCKaihh7gfCPq28tz/fREokPtpVNsGUE6OypdMXMz7/VkKAASSZmKNtqKaz+B7R1iaOa9KCY4oUJ4SwqtV3Wg6pB7MQUi2Bq0VO/K35JnxV4bpZtx/V4UNVyRFmPA3BX9US/0yzM4OxvVP+yECgYAslwxxfxUBsd66CLuTO01w5kFjPrZWX7EIMJ1UVX2j/SSkSCqrsaaQdUIp+vsPJVvbnD+yb5dp6hsNt243RskZt4OkCHkoLBdKUGLknC3nXjcHcI5R7HsR4J9jGLHU0kbESNJVdHfK06r90fQIg06x/NVqneL3bQTMj7yPMokslg=='
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: 'AAA-00000'
        message:
          type: string
          example: 'Some Error Message'
        description:
          type: string
          example: 'Some Error Description'
        traceId:
          type: string
          example: 'e0fbcfeb-3617-43c4-8dd0-7b7d38e13047'